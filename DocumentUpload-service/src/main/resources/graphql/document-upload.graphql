scalar Upload ## 사용자로부터 파일을 업로드 받을 때 사용하는 파일 스칼라 타입 정의

"""문서 조회"""
type Query { # 데이터를 읽어오는 요청
    getDocument(documentId: ID!): Document
    getS3Files(pathName: PathName!): [String!]
}

type Document { # Document 타입 정의
    documentId: ID! # 고유 식별자

    # 파일 업로드 관련 정보
    documentName: String!
    s3Path: String!
    uploadedBy: String! # 사용자 이름
    uploadedAt: String! # GraphQL Instant 타입 지원x

    # 업로드 상태
    status: UploadStatus!
    message: String
}

"""업로드 성공 여부"""
enum UploadStatus {
    SUCCESS
    FAILURE
}

"""S3 파일 경로"""
enum PathName {
    DOCUMENTS
}

"""문서 업로드 Mutation"""
type Mutation {
    uploadDocument( # 클라이언트가 문서를 서버에 업로드할 때 호출하는 API 엔드포인트
        file: Upload! # MultipartFile 같은 객체로 바인딩
        meta: DocumentMetaInput!
        context: EventContextInput!
    ): UploadResponse!
}

"""이벤트 컨텍스트 정보 (Kafka 이벤트 헤더에 해당)"""
input EventContextInput {
    version: String! ## 1.0
    eventType: String! ## document_upload
    traceId: String! ## abc-123-trace
    uploadedBy: String! ## 사용자 아이디
}

"""문서 메타 정보"""
input DocumentMetaInput {
    mimeType: String! ## application/pdf
    language: String! ## en
}

"""문서 업로드 응답"""
type UploadResponse {
    documentId: ID! ## 문서 고유 id
    documentName: String!
    s3Path: String! # 내부 저장 경로
    uploadedAt: String! # ISO 8601 format (e.g., "2025-06-30T14:23:00Z")
    uploadedBy: String!
    pdfUrl: String! # 버킷 안에 있는 객체 url
    status: UploadStatus! ## sucess or false
    message: String ## 실패시 log message
}

